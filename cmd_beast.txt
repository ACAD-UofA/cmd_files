###BEAST1###
java -jar path/to/beast.jar [options] myfile.xml

Usage: beast [-verbose] [-warnings] [-strict] [-window] [-options] [-working] [-seed] [-prefix <PREFIX>] [-overwrite] [-errors <i>] [-threads <i>] [-java] [-beagle] [-beagle_info] [-beagle_order <order>] [-beagle_instances <i>] [-beagle_CPU] [-beagle_GPU] [-beagle_SSE] [-beagle_single] [-beagle_double] [-beagle_scaling <default|dynamic|delayed|always|none>] [-beagle_rescale <i>] [-mpi] [-help] [<input-file-name>]
    -verbose Give verbose XML parsing messages
    -warnings Show warning messages about BEAST XML file
    -strict Fail on non-conforming BEAST XML file
    -window Provide a console window
    -options Display an options dialog
    -working Change working directory to input file's directory
    -seed Specify a random number generator seed
    -prefix Specify a prefix for all output log filenames
    -overwrite Allow overwriting of log files
    -errors Specify maximum number of numerical errors before stopping
    -threads The number of computational threads to use (default auto)
    -java Use Java only, no native implementations
    -beagle Use beagle library if available
    -beagle_info BEAGLE: show information on available resources
    -beagle_order BEAGLE: set order of resource use
    -beagle_instances BEAGLE: divide site patterns amongst instances
    -beagle_CPU BEAGLE: use CPU instance
    -beagle_GPU BEAGLE: use GPU instance if available
    -beagle_SSE BEAGLE: use SSE extensions if available
    -beagle_single BEAGLE: use single precision if available
    -beagle_double BEAGLE: use double precision if available
    -beagle_scaling BEAGLE: specify scaling scheme to use
    -beagle_rescale BEAGLE: frequency of rescaling (dynamic scaling only)
    -mpi Use MPI rank to label output
    -help Print this information and stop

  Example: beast test.xml
  Example: beast -window test.xml
  Example: beast -help



###Change memory allocation###
java -Xmx2048m -jar path/to/beast.jar myfile.xml
java -Xmx2g -jar path/to/beast.jar myfile.xml



###beastmc3###
java -jar path/to/beastmc3.jar [options] myfile.xml

Usage: beastmc3 [-chains <i>] [-delta <r>] [-temperatures] [-swap <i>] [-verbose] [-strict] [-window] [-working] [-overwrite] [-options] [-help]  [-chains <chain-count>] [-delta <temperature-delta>|-temperatures <temperature-list>] [-swap <swap-every>] [-verbose] [-window] [-working] [-help] [<input-file-name>]
    -chains number of chains
    -delta temperature increment parameter
    -temperatures a comma-separated list of the hot chain temperatures
    -swap frequency at which chains temperatures will be swapped
    -verbose verbose XML parsing messages
    -strict Fail on non conforming BEAST XML file
    -window provide a console window
    -working change working directory to input file's directory
    -overwrite Allow overwriting of log files
    -options Display an options dialog
    -help option to print this message

  Example: beastmc3 -chains 3 -delta 1.0 -swap 100 test.xml
  Example: beastmc3 -temperatures 0.2,0.4 -swap 200 -window test.xml



###LogCombiner###
java -cp path/to/beast.jar dr.app.tools.LogCombiner [options] mydata1.log mydata2.log mycombined.log
java -cp path/to/beast.jar dr.app.tools.LogCombiner -trees [options] mydata1.trees mydata2.trees mycombined.trees

Usage: logcombiner [-trees] [-decimal] [-burnin <i>] [-resample <i>] [-scale <r>] [-renumber] [-help] <input-file-name1> [<input-file-name2> ...] <output-file-name>
    -trees use this option to combine tree log files
    -decimal this option converts numbers from scientific to decimal notation
    -burnin the number of states to be considered as 'burn-in'
    -resample resample the log files to this frequency (the original sampling frequency must be a factor of this value)
    -scale a scaling factor that will multiply any time units by this value
    -renumber this option renumbers output states consecutively
    -help option to print this message

  Example: logcombiner test1.log test2.log combined.log
  Example: logcombiner -burnin 10000 test1.log test2.log combined.log
  


###Tree.Annotator###
java -cp path/to/beast.jar dr.app.tools.TreeAnnotator [options] mycombined.trees mycombined.tree

Usage: treeannotator [-heights <keep|median|mean|ca>] [-burnin <i>] [-limit <r>] [-target <target_file_name>] [-help] [-forceDiscrete] [-hpd2D <r>] <input-file-name> [<output-file-name>]
    -heights an option of 'keep' (default), 'median', 'mean' or 'ca'
    -burnin the number of states to be considered as 'burn-in'
    -limit the minimum posterior probability for a node to be annotated
    -target specifies a user target tree to be annotated
    -help option to print this message
    -forceDiscrete forces integer traits to be treated as discrete traits.
    -hpd2D the HPD interval to be used for the bivariate traits

  Example: treeannotator test.trees out.txt
  Example: treeannotator -burnin 100 -heights mean test.trees out.txt
  Example: treeannotator -burnin 100 -target map.tree test.trees out.txt



###popGraphFromCSV.py (EBSP)##
popGraphFromCSV.py --help
Usage:  [options] file.csv file.png

Options:
  -h, --help            show this help message and exit
  --xlim=XLIM           cut off X-axis at this point
  --ylim=YLIM           cut off Y-axis at this point
  --logy                Log scale for Y axis
  --yscale=YSCALE       Y-axis scale factor
  --width=WIDTH         figure width. Integral value with units: 50mm 2cm 3
                        (inches)
  --lw=LW               Line width
  --font=FONT           name of font for figure text
  --fontsize=FONTSIZE   font size of figure text
  --ticks=TICKLABELSIZE
                        font size of ticks labels
  --nxticks=NXTICKS     number of X-axis ticks
  --title=TITLE         Figure title
  --hist                
  --alldem=ALLDFILE    plot all demographic functions in this file
  -a ALPHA, --alphaout=ALPHA
                        transparancy value of outline.
  --alpha=ALLDALPHA     transparancy value to use when plotting all
                        demographic. 1 - no transparancy, 0 fully transparent.
  --ratio=RATIO         height/width ratio of figure.

examples:
popGraphFromCSV.py --logy mystery.csv mystery1.png
popGraphFromCSV.py --xlim 0.03 ./mystery.csv ./mystery-2.png
popGraphFromCSV.py --logy --width 12cm --ratio .85 --font Arial --fontsize 10 --ticks 10 ./mystery.csv ./mystery1.png

For some functions (--hist, --alldem), generate a more detailed csv file:
Prepare a new file_name_alld.xml file. Open the file_name.xml file with a text editor and copy the last two sections, 
VDAnalysis and CSVexport to a new file (say 'alld.xml'). Place them inside a '<beast> </beast>' section. Now make the 
following manual changes: 
- add nBins="200" to the VDAnalysis attributes
- add those two terms at the end of the element:
<allDemographicsFileName>
file_name.alld.txt
</allDemographicsFileName>
<rootheightColumn>
nuclear.nex.treeModel.rootHeight
</rootheightColumn>

Run BEAST again:
beast -overwrite file_name_alld.xml
popGraphFromCSV.py --logy --hist ./mystery.csv ./mystery-hist.png
popGraphFromCSV.py --logy --alpha 0.05 --alldem mystery.alld.txt ./mystery.csv ./mystery-05.png


###SkyViz by Brendan O'Fallon (available at https://github.com/brendanofallon/SkyViz)
#The first time only: compile programs in SkyViz-master/src/app and SkyViz-master/src/gui
javac *.java
#Launch the program from the src directory
java app/SkyVizApp



###BEAST2###

##LogCombiner
java -cp path/to/beast.jar beast.app.tools.LogCombiner [options] -log mydata1.log -log mydata2.log -o mycombined.log
java -cp path/to/beast.jar beast.app.tools.LogCombiner [options] -log mydata1.trees -log mydata2.trees -o mycombined.trees

Usage: LogCombiner -log <file> -n <int> [<options>]
combines multiple (trace or tree) log files into a single log file.
options:
-log <file>      specify the name of the log file, each log file must be specified with separate -log option
-o <output.log>  specify log file to write into (default output is stdout)
-b <burnin>      specify the number PERCENTAGE of lines in the log file considered to be burnin (default 10)
-dir <directory> specify particle directory -- used for particle filtering in BEASTLabs only -- if defined only one log must be specified and the -n option specified
-n <int>         specify the number of particles, ignored if -dir is not defined
-resample <int>  specify number of states to resample
-decimal         flag to indicate numbers should converted from scientific into decimal format
-renumber        flag to indicate output states should be renumbered
-help            print this message

##TreeAnnotator
java -cp path/to/beast.jar beast.app.treeannotator.TreeAnnotator [options] mycombined.trees mycombined.tree

Usage: treeannotator [-heights <keep|median|mean|ca>] [-burnin <i>] [-b <i>] [-limit <r>] [-target <target_file_name>] [-help] [-forceDiscrete] [-lowMem] [-hpd2D <r>] [-nohpd2D] [-noSA] <input-file-name> [<output-file-name>]
  -heights an option of 'keep' (default), 'median', 'mean' or 'ca'
  -burnin the percentage of states to be considered as 'burn-in'
  -b the percentage of states to be considered as 'burn-in'
  -limit the minimum posterior probability for a node to be annotated
  -target specifies a user target tree to be annotated
  -help option to print this message
  -forceDiscrete forces integer traits to be treated as discrete traits.
  -lowMem use less memory, which is a bit slower.
  -hpd2D the HPD interval to be used for the bivariate traits
  -nohpd2D suppress calculation of HPD intervals for the bivariate traits
  -noSA interpret the tree set as begin from a not being from a sampled ancestor analysis, even if there are zero branch lengths in the tree set

Example: treeannotator test.trees out.txt
Example: treeannotator -burnin 10 -heights mean test.trees out.txt
Example: treeannotator -burnin 20 -target map.tree test.trees out.txt